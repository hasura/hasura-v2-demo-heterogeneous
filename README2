# -*- mode: org; -*-

#+STARTUP: indent

* Steps

** Step 1:  Create a new directory.

#+begin_src bash :exports code :session scratch
  mkdir -p scratch
#+end_src

#+RESULTS:

** Step 2:  Change to the new directory.

#+begin_src bash :exports code :session scratch
  cd scratch
#+end_src

#+RESULTS:

** Step 3:  Create a Docker Compose file.

#+begin_src bash :exports code :session scratch
  touch docker-compose.yaml
#+end_src

#+RESULTS:

** Step 4:  Create a PostgreSQL initialization directory.

#+begin_src bash :exports code :session scratch
  mkdir -p initdb.d-postgres
#+end_src

#+RESULTS:

** Step 5:  Download the PostgresSQL initialization files.

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-postgres/03_chinook_database.sql https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-postgres/03_chinook_database.sql?token=GHSAT0AAAAAACU4IFOYXZX42LRNWXHFUIFAZVJK5YQ
#+end_src

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-postgres/04_chinook_ddl.sql https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-postgres/04_chinook_ddl.sql?token=GHSAT0AAAAAACU4IFOZRCCNAD67ALMMVVWSZVJK5ZQ
#+end_src

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-postgres/05_chinook_dml.sql https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-postgres/05_chinook_dml.sql?token=GHSAT0AAAAAACU4IFOZ2CYRGAADVAHVUCOYZVJK53A
#+end_src

** Step 6:  Scaffold the Docker Compose file.

#+begin_src yaml
version: '3.1'
services:
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' > docker-compose.yaml
version: '3.1'
services:
EOF
#+end_src

** Step 7:  Add the ~postgres~ service.

#+begin_src yaml
  postgres:
    image: postgres:16          # Use a modern version of PostgreSQL.
    ports:
      - ${PGPORT}:5432          # Expose it on a port taken from an environment variable.
    environment:                # Set its superuser username and password.
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    volumes:                    # Initialize from the contents of the initialization directory.
      - ./initdb.d-postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:                # Use a sensible healthcheck.
      test: psql -U postgres -d chinook -c "select count(*) from \"Artist\""
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' >> docker-compose.yaml
  postgres:
    image: postgres:16          # Use a modern version of PostgreSQL.
    ports:
      - ${PGPORT}:5432          # Expose it on a port taken from an environment variable.
    environment:                # Set its superuser username and password.
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    volumes:                    # Initialize from the contents of the initialization directory.
      - ./initdb.d-postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:                # Use a sensible healthcheck.
      test: psql -U postgres -d chinook -c "select count(*) from \"Artist\""
EOF
#+end_src

** Step 8:  Set environment variables.

#+begin_src bash :exports code :session scratch :results none
  export PGPORT=5433		# or your own port
  export PGUSER=postgres
  export PGPASSWORD=postgres
  export PGDATABASE=chinook
  export PGHOST=localhost
#+end_src

** Step 8:  Test the PostgreSQL service.

#+begin_src bash :exports code :session scratch :results none
  docker compose up -d postgres
#+end_src

#+begin_src bash :exports code :session scratch :results output
  docker exec scratch-postgres-1 psql -U postgres -d chinook -c "select count(*) from \"Track\""
#+end_src

#+RESULTS:
: count 
: -------
:   3503
: (1 row)

** Step 9:  Create a MongoDB initialization directory.

#+begin_src bash :exports code :session scratch :results none
  mkdir -p initdb.d-mongo
#+end_src

** Step 10:  Download the MongoDB initialization files.

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-mongo/01_import_data.sh https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-mongo/01_import_data.sh?token=GHSAT0AAAAAACU4IFOZPD2F2WPQSJYCFR6OZVJMS2Q
#+end_src

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-mongo/postgres.Album.json https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-mongo/postgres.Album.json?token=GHSAT0AAAAAACU4IFOZEMZRK75GBGH2526QZVJMS4A
#+end_src

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-mongo/postgres.Artist.json https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-mongo/postgres.Artist.json?token=GHSAT0AAAAAACU4IFOZIHWEZHDLYAEWVKW4ZVJMS5A
#+end_src

#+begin_src bash :exports code :session scratch :results none
  wget -O initdb.d-mongo/postgres.Track.json https://raw.githubusercontent.com/hasura/hasura-v2-demo-heterogeneous/main/initdb.d-mongo/postgres.Track.json?token=GHSAT0AAAAAACU4IFOYJBMR6SRKNKXAOVWMZVJMW4A
#+end_src

** Step 11:  Add the ~mongo~ service.

#+begin_src yaml
  mongo:
    image: mongo:6              # Use a modern version of MongoDB.
    ports:
      - ${MGPORT}:27017         # Expose it on a port taken from an environment variable.
    environment:                # Set its superuser username and password.
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_ROOT_USERNAME: mongo
    volumes:                    # Initialize from the contents of the initialization directory.
      - ./initdb.d-mongo:/docker-entrypoint-initdb.d:ro
    depends_on:                 # Wait until postgres starts up first.
      postgres:
        condition: service_healthy
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' >> docker-compose.yaml
  mongo:
    image: mongo:6              # Use a modern version of MongoDB.
    ports:
      - ${MGPORT}:27017         # Expose it on a port taken from an environment variable.
    environment:                # Set its superuser username and password.
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_ROOT_USERNAME: mongo
    volumes:                    # Initialize from the contents of the initialization directory.
      - ./initdb.d-mongo:/docker-entrypoint-initdb.d:ro
    depends_on:                 # Wait until postgres starts up first.
      postgres:
        condition: service_healthy
EOF
#+end_src

** Step 12:  Set environment variables.

#+begin_src bash :exports code :session scratch :results none
  export MGPORT=27018		# or your own port
#+end_src

** Step 13:  Test the MongoDB service.

#+begin_src bash :exports code :session scratch :results none
  docker compose up -d mongo
#+end_src

#+begin_src bash :exports code :session scratch :results output
  docker exec scratch-mongo-1 mongosh --quiet -u mongo -p mongo --eval "db.postgres.Album.findOne()" admin 
#+end_src

#+RESULTS:
: {
:   _id: ObjectId('6637f6cc7cda30b626bb1d07'),
:   AlbumId: 1,
:   Title: 'For Those About To Rock We Salute You',
:   ArtistId: 1
: }

** Step 14:  Add the ~mongo_data_connector~ service.

#+begin_src yaml
  mongo_data_connector:         # Start the connector agent.
    image: hasura/mongo-data-connector:v2.38.0
    depends_on:                 # Wait until mongo starts up first.
      - mongo
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' >> docker-compose.yaml
  mongo_data_connector:         # Start the connector agent.
    image: hasura/mongo-data-connector:v2.38.0
    depends_on:                 # Wait until mongo starts up first.
      - mongo
EOF
#+end_src

** Step 15:  Add the ~redis~ service.

#+begin_src yaml
  redis:
    image: redis:latest
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' >> docker-compose.yaml
  redis:
    image: redis:latest
EOF
#+end_src

** Step 16:  Add Hasura.

#+begin_src yaml
  hasura:                       # Start Hasura.
    image: hasura/graphql-engine:v2.40.0
    depends_on:                 # Wait until the connector agent starts up first.
      - mongo_data_connector
    ports:                      # Expose it on a port taken from an environment variable
      - ${HGPORT}:8080
    healthcheck:                # Use a sensible healthcheck.
      test: curl -s http://localhost:8080/healthz
      start_period: 60s
    environment:                # Configure Hasura.
      HASURA_GRAPHQL_ADMIN_SECRET: hasura # Hasura EE requires an admin secret.
      HASURA_GRAPHQL_DEV_MODE: true       # We require dev mode.
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HASURA_GRAPHQL_EE_LICENSE_KEY} # Hasura EE requires a license key.
      HASURA_GRAPHQL_ENABLE_CONSOLE: true # We require Hasura Console.
      HASURA_GRAPHQL_MAX_CACHE_SIZE: 200  # Set Redis cache size.
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres/metadata # Hasura requires a PostgreSQL DB for metadata.
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"Mongo":{"uri":"http://mongo_data_connector:3000"}}}}' # Tell Hasura about the connector agent.
      HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: redis://redis:6379 # Set the Redis URL for rate-limiting.
      HASURA_GRAPHQL_REDIS_URL: redis://redis:6379            # Use the same Redis URL for caching.
      POSTGRES_URL: postgres://postgres:postgres@postgres/chinook # Set a database URL environment variable.
#+end_src

#+begin_src bash :exports code :session scratch :results none
cat <<'EOF' >> docker-compose.yaml
  hasura:                       # Start Hasura.
    image: hasura/graphql-engine:v2.40.0
    depends_on:                 # Wait until the connector agent starts up first.
      - mongo_data_connector
    ports:                      # Expose it on a port taken from an environment variable
      - ${HGPORT}:8080
    healthcheck:                # Use a sensible healthcheck.
      test: curl -s http://localhost:8080/healthz
      start_period: 60s
    environment:                # Configure Hasura.
      HASURA_GRAPHQL_ADMIN_SECRET: hasura # Hasura EE requires an admin secret.
      HASURA_GRAPHQL_DEV_MODE: true       # We require dev mode.
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HASURA_GRAPHQL_EE_LICENSE_KEY} # Hasura EE requires a license key.
      HASURA_GRAPHQL_ENABLE_CONSOLE: true # We require Hasura Console.
      HASURA_GRAPHQL_MAX_CACHE_SIZE: 200  # Set Redis cache size.
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres/metadata # Hasura requires a PostgreSQL DB for metadata.
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"Mongo":{"uri":"http://mongo_data_connector:3000"}}}}' # Tell Hasura about the connector agent.
      HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: redis://redis:6379 # Set the Redis URL for rate-limiting.
      HASURA_GRAPHQL_REDIS_URL: redis://redis:6379            # Use the same Redis URL for caching.
      POSTGRES_URL: postgres://postgres:postgres@postgres/chinook # Set a database URL environment variable.
EOF
#+end_src

** Step 16:  Set environment variables.

#+begin_src bash :exports code :session scratch :results none
  export HASURA_GRAPHQL_EE_LICENSE_KEY=<your EE license key>
  export HGPORT=8081		# or your own port
#+end_src

** Step 17:  Start the ~mongo_data_connector~, ~redis~ and ~hasura~ services.

#+begin_src bash :exports code :session scratch :results none
  docker compose up -d mongo_data_connector redis hasura
#+end_src

** Step 18:  Open the Hasura Console and log in.

#+begin_src bash :exports code :session scratch :results none
  xdg-open http://localhost:8081	# or your own port
#+end_src
